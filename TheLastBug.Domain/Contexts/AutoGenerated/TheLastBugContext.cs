using System;
using Microsoft.EntityFrameworkCore;
using TheLastBug.Domain.Models;

namespace TheLastBug.Domain.Contexts.AutoGenerated
{
    public partial class TheLastBugContext : DbContext
    {
        public TheLastBugContext()
        {
        }

        public TheLastBugContext(DbContextOptions<TheLastBugContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Usuario> Usuarios { get; set; }
        public virtual DbSet<Pais> Paises { get; set; }
        public virtual DbSet<Region> Regiones { get; set; }
        public virtual DbSet<Comuna> Comunas { get; set; }
        public virtual DbSet<AyudaSocial> AyudasSociales { get; set; }
        public virtual DbSet<Log> Logs { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                optionsBuilder.UseSqlServer("Name=default"); // Actualiza esta cadena de conexión según tu configuración
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Usuario>(entity =>
            {
                entity.HasKey(e => e.Id);
                entity.ToTable("USUARIOS");

                entity.Property(e => e.Id).HasColumnName("ID");
                entity.Property(e => e.Nombre).IsRequired().HasColumnName("NOMBRE").HasMaxLength(50).IsUnicode(false);
                entity.Property(e => e.Email).IsRequired().HasColumnName("EMAIL").HasMaxLength(50).IsUnicode(false);
                entity.Property(e => e.PasswordHash).IsRequired().HasColumnName("PASSWORDHASH").HasMaxLength(50).IsUnicode(false);
                entity.Property(e => e.Rol).HasColumnName("ROL").HasColumnType("numeric(1, 0)");

                entity.HasIndex(e => e.Id).IsUnique();
            });

            modelBuilder.Entity<Pais>(entity =>
            {
                entity.HasKey(e => e.Id);
                entity.ToTable("PAISES");

                entity.Property(e => e.Id).HasColumnName("ID");
                entity.Property(e => e.Nombre).IsRequired().HasColumnName("NOMBRE").HasMaxLength(50).IsUnicode(false);
            });

            modelBuilder.Entity<Region>(entity =>
            {
                entity.HasKey(e => e.Id);
                entity.ToTable("REGIONES");

                entity.Property(e => e.Id).HasColumnName("ID");
                entity.Property(e => e.Nombre).IsRequired().HasColumnName("NOMBRE").HasMaxLength(50).IsUnicode(false);

                entity.HasOne(d => d.Pais)
                      .WithMany(p => p.Regiones)
                      .HasForeignKey(d => d.PaisId)
                      .IsRequired() 
                      .OnDelete(DeleteBehavior.ClientSetNull);
            });

            modelBuilder.Entity<Comuna>(entity =>
            {
                entity.HasKey(e => e.Id);
                entity.ToTable("COMUNAS");

                entity.Property(e => e.Id).HasColumnName("ID");
                entity.Property(e => e.Nombre).IsRequired().HasColumnName("NOMBRE").HasMaxLength(50).IsUnicode(false);

                entity.HasOne(d => d.Region)
                      .WithMany(p => p.Comunas)
                      .HasForeignKey(d => d.RegionId)
                      .OnDelete(DeleteBehavior.ClientSetNull);
            });

            modelBuilder.Entity<AyudaSocial>(entity =>
            {
                entity.HasKey(e => e.Id);
                entity.ToTable("AYUDASSOCIALES");

                entity.Property(e => e.Id).HasColumnName("ID");
                entity.Property(e => e.TipoAyuda).IsRequired().HasColumnName("TIPOAYUDA").HasMaxLength(50).IsUnicode(false);
                entity.Property(e => e.Anio).HasColumnName("ANIO");
                entity.Property(e => e.ComunaId).HasColumnName("COMUNAID");
                entity.Property(e => e.UsuarioId).HasColumnName("USUARIOID");
                entity.Property(e => e.FechaAsignacion).HasColumnName("FECHAASIGNACION").HasColumnType("datetime");

                entity.HasOne(d => d.Comuna)
                      .WithMany(p => p.AyudasSociales)
                      .HasForeignKey(d => d.ComunaId)
                      .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.Usuario)
                      .WithMany(p => p.AyudasSociales)
                      .HasForeignKey(d => d.UsuarioId)
                      .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasIndex(e => new { e.UsuarioId, e.TipoAyuda, e.Anio }).IsUnique();
            });

            modelBuilder.Entity<Log>(entity =>
            {
                entity.HasKey(e => e.Id);
                entity.ToTable("LOGS");

                entity.Property(e => e.Id).HasColumnName("ID");
                entity.Property(e => e.UserId).HasColumnName("USERID");
                entity.Property(e => e.Accion).IsRequired().HasColumnName("ACCION").HasMaxLength(255).IsUnicode(false);
                entity.Property(e => e.FechaHora).HasColumnName("FECHAHORA").HasColumnType("datetime");

                entity.HasOne(d => d.Usuario)
                      .WithMany(p => p.Logs)
                      .HasForeignKey(d => d.UserId)
                      .OnDelete(DeleteBehavior.ClientSetNull);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
