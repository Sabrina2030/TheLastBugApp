using TheLastBug.Business.DTOs;
using TheLastBug.Business.Interfaces;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Linq;
using TheLastBug.Domain.Models;
using System.Threading.Tasks;
using TheLastBug.Domain.Contexts.AutoGenerated;
using TheLastBug.Business.Enums;
using AutoMapper;

namespace TheLastBug.Business.Services
{
    public class UsuariosService : IUsuarioService
    {
        private readonly TheLastBugContext context;
        private readonly ILogger logger;
        private readonly IMapper _mapper;
        public UsuariosService(TheLastBugContext context, ILogger<UsuariosService> logger, IMapper mapper)
        {
            this.context = context;
            this.logger = logger;
            this._mapper = mapper;
        }

        public async Task<bool> CreateUserAccount(UsuarioDTO userAccount)
        {
            try
            {                
                var existingUser = await context.Usuarios.FirstOrDefaultAsync(u => u.Email == userAccount.Email);
                if (existingUser != null)
                {
                    logger.LogWarning($"El usuario con correo electrónico '{userAccount.Email}' ya existe.");
                    return false;
                }

                var newUser =  _mapper.Map<Usuario>(userAccount);
                context.Usuarios.Add(newUser);
                await context.SaveChangesAsync();

                logger.LogInformation($"Usuario '{userAccount.Email}' creado exitosamente.");
                return true;
            }
            catch (Exception ex)
            {
                logger.LogError($"Error al crear usuario: {ex.Message}");
                return false;
            }
        }

        public UsuarioInfoDTO UserExists(string userMail, string userPass)
        {
            var userInfo = context.Usuarios
                .Where(x => x.Email.Equals(userMail) && x.PasswordHash.Equals(userPass))
                .Select(x => new UsuarioInfoDTO
                {
                    Id = x.Id,
                    UserName = $"{x.Nombre}",
                    IsAdmin = x.Rol
                })
                .FirstOrDefault();

            return userInfo;
        }
    }
}
