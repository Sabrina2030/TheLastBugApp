using AutoMapper;
using Google.Apis.Logging;
using Microsoft.AspNetCore.Authorization;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TheLastBug.Business.DTOs;
using TheLastBug.Business.Interfaces;
using TheLastBug.Domain.Contexts.AutoGenerated;
using TheLastBug.Domain.Models;
using ILogger = Microsoft.Extensions.Logging.ILogger;

namespace TheLastBug.Business.Services
{
    public class RegionService : IRegionService
    {
        private readonly TheLastBugContext context;
        private readonly ILogger logger;
        private readonly IMapper _mapper;

        public RegionService(TheLastBugContext context, ILogger<RegionService> logger, IMapper mapper)
        {
            this.context = context;
            this.logger = logger;
            this._mapper = mapper;
        }

        public async Task<int> CreateRegion(RegionDTO regionDto)
        {
            try
            {
                var region = _mapper.Map<Region>(regionDto);
                context.Regiones.Add(region);
                await context.SaveChangesAsync();
                return region.Id;
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Error al crear una nueva región.");
                throw;
            }
        }

        public async Task<bool> DeleteRegion(int regionId)
        {
            try
            {
                var region = await context.Regiones.FindAsync(regionId);

                if (region == null)
                {
                    logger.LogWarning($"No se encontró la región con ID: {regionId}");
                    return false;
                }

                context.Regiones.Remove(region);
                await context.SaveChangesAsync();

                return true;
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Error al eliminar la región.");
                throw;
            }
        }

        public async Task<List<RegionDTO>> GetAllRegiones()
        {
            try
            {
                var regiones = await context.Regiones.ToListAsync();
                return _mapper.Map<List<RegionDTO>>(regiones);
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Error al obtener todas las regiones.");
                throw;
            }
        }

        public async Task<RegionDTO> GetRegionById(int regionId)
        {
            try
            {
                var region = await context.Regiones.FindAsync(regionId);

                if (region == null)
                {
                    logger.LogWarning($"No se encontró la región con ID: {regionId}");
                    return null;
                }

                return _mapper.Map<RegionDTO>(region);
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Error al obtener la región por ID.");
                throw;
            }
        }
        public async Task<bool> UpdateRegion(int regionId, RegionDTO regionDto)
        {
            try
            {
                var region = await context.Regiones.FindAsync(regionId);

                if (region == null)
                {
                    logger.LogWarning($"No se encontró la región con ID: {regionId}");
                    return false;
                }

                _mapper.Map(regionDto, region);
                await context.SaveChangesAsync();

                return true;
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Error al actualizar la región.");
                throw;
            }
        }
    }
}
