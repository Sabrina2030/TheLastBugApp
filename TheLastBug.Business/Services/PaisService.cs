using AutoMapper;
using Microsoft.AspNetCore.Authorization;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TheLastBug.Business.DTOs;
using TheLastBug.Business.Interfaces;
using TheLastBug.Domain.Contexts.AutoGenerated;
using TheLastBug.Domain.Models;

namespace TheLastBug.Business.Services
{
    public class PaisService : IPaisService
    {
        private readonly TheLastBugContext context;
        private readonly ILogger logger;
        private readonly IMapper _mapper;

        public PaisService(TheLastBugContext context, ILogger<PaisService> logger, IMapper mapper)
        {
            this.context = context;
            this.logger = logger;
            this._mapper = mapper;
        }

        public async Task<int> CreatePais(PaisDTO paisDto)
        {

            try
            {
                Pais pais = _mapper.Map<Pais>(paisDto);
                context.Paises.Add(pais);
                await context.SaveChangesAsync();
                return pais.Id;
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Error al crear un nuevo país.");
                throw;
            }
        }

        public async Task<bool> DeletePais(int paisId)
        {
            try
            {
                var pais = await context.Paises.FindAsync(paisId);

                if (pais == null)
                {
                    logger.LogWarning($"No se encontró el país con ID: {paisId}");
                    return false;
                }

                context.Paises.Remove(pais);
                await context.SaveChangesAsync();

                return true;
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Error al eliminar el país.");
                throw;
            }
        }

        public async Task<List<PaisDTO>> GetAllPaises()
        {
            try
            {
                var paises = await context.Paises.ToListAsync();
                return _mapper.Map<List<PaisDTO>>(paises);
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Error al obtener todos los países.");
                throw;
            }
        }

        public async Task<PaisDTO> GetPaisById(int paisId)
        {
            try
            {
                var pais = await context.Paises.FindAsync(paisId);

                if (pais == null)
                {
                    logger.LogWarning($"No se encontró el país con ID: {paisId}");
                    return null;
                }

                return _mapper.Map<PaisDTO>(pais);
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Error al obtener el país por ID.");
                throw;
            }
        }

        public async Task<bool> UpdatePais(int paisId, PaisDTO paisDto)
        {
            try
            {
                var pais = await context.Paises.FindAsync(paisId);

                if (pais == null)
                {
                    logger.LogWarning($"No se encontró el país con ID: {paisId}");
                    return false;
                }
;
                _mapper.Map(paisDto, pais);
                await context.SaveChangesAsync();

                return true;
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Error al actualizar el país.");
                throw;
            }
        }
    }
}
