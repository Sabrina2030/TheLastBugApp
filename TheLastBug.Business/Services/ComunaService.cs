using AutoMapper;
using Google.Apis.Drive.v3.Data;
using Google.Apis.Logging;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Claims;
using System.Text;
using System.Threading.Tasks;
using TheLastBug.Business.DTOs;
using TheLastBug.Business.Helpers;
using TheLastBug.Business.Interfaces;
using TheLastBug.Domain.Contexts.AutoGenerated;
using TheLastBug.Domain.Models;
using ILogger = Microsoft.Extensions.Logging.ILogger;

namespace TheLastBug.Business.Services
{
    public class ComunaService : IComunaService
    {
        private readonly TheLastBugContext context;
        private readonly ILogger logger;
        private readonly ILogService logService;
        private readonly IMapper _mapper;
        private readonly IHttpContextAccessor _httpContextAccessor;

        public ComunaService(TheLastBugContext context, ILogger<ComunaService> logger, IMapper mapper, ILogService logService, IHttpContextAccessor httpContextAccessor)
        {
            this.context = context;
            this.logger = logger;
            this._mapper = mapper;
            this.logService = logService;
            _httpContextAccessor = httpContextAccessor;
        }

        public async Task<int> CreateComuna(ComunaDTO comunaDto)
        {
            try
            {
                // Obtener el HttpContext actual
                var httpContext = _httpContextAccessor.HttpContext;

                // Obtener el UserId del claim de identidad
                var userIdClaim = httpContext.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier);

                if (userIdClaim != null && int.TryParse(userIdClaim.Value, out int userId))
                {
                    var comuna = _mapper.Map<Comuna>(comunaDto);
                    context.Comunas.Add(comuna);
                    await context.SaveChangesAsync();

                    // Registrar la acción de creación de comuna en el log
                    await logService.LogUserAction(userId, $"Creación de comuna: {comunaDto.Nombre}");

                    return comuna.Id;
                }
                else
                {
                    throw new AyudaSocialAssignmentException("Usuario no autenticado.");
                }
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Error al crear una nueva comuna.");
                throw;
            }
        }

        public async Task<bool> DeleteComuna(int comunaId)
        {
            try
            {
                var comuna = await context.Comunas.FindAsync(comunaId);

                if (comuna == null)
                {
                    logger.LogWarning($"No se encontró la comuna con ID: {comunaId}");
                    return false;
                }

                context.Comunas.Remove(comuna);
                await context.SaveChangesAsync();

                return true;
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Error al eliminar la comuna.");
                throw;
            }
        }

        public async Task<List<ComunaDTO>> GetAllComunas()
        {
            try
            {
                var comunas = await context.Comunas.ToListAsync();
                return _mapper.Map<List<ComunaDTO>>(comunas);
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Error al obtener todas las comunas.");
                throw;
            }
        }

        public async Task<ComunaDTO> GetComunaById(int comunaId)
        {
            try
            {
                var comuna = await context.Comunas.FindAsync(comunaId);

                if (comuna == null)
                {
                    logger.LogWarning($"No se encontró la comuna con ID: {comunaId}");
                    return null;
                }

                return _mapper.Map<ComunaDTO>(comuna);
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Error al obtener la comuna por ID.");
                throw;
            }
        }

        public async Task<bool> UpdateComuna(int comunaId, ComunaDTO comunaDto)
        {
            try
            {
                var comuna = await context.Comunas.FindAsync(comunaId);

                if (comuna == null)
                {
                    logger.LogWarning($"No se encontró la comuna con ID: {comunaId}");
                    return false;
                }

                _mapper.Map(comunaDto, comuna);
                await context.SaveChangesAsync();

                return true;
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Error al actualizar la comuna.");
                throw;
            }
        }
    }
}
