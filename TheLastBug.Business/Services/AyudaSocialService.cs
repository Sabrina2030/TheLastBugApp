using AutoMapper;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Net;
using System.Text;
using System.Threading.Tasks;
using TheLastBug.Business.DTOs;
using TheLastBug.Business.Interfaces;
using TheLastBug.Domain.Contexts.AutoGenerated;
using TheLastBug.Domain.Models;
using TheLastBug.Business.Helpers;

namespace TheLastBug.Business.Services
{
    public class AyudaSocialService : IAyudaSocialService
    {
        private readonly TheLastBugContext context;
        private readonly ILogger logger;
        private readonly IMapper _mapper;
        public AyudaSocialService(TheLastBugContext context, ILogger<AyudaSocialService> logger, IMapper mapper)
        {
            this.context = context;
            this.logger = logger;
            this._mapper = mapper;
        }

        public async Task<int> CreateAyudaSocial(AyudaSocialDTO ayudaSocialDto)
        {
            try
            {
                if (await CanAssignAyudaSocial(ayudaSocialDto.UsuarioId, ayudaSocialDto.TipoAyuda, ayudaSocialDto.Anio))
                {
                    var ayudaSocial = _mapper.Map<AyudaSocial>(ayudaSocialDto);
                    context.AyudasSociales.Add(ayudaSocial);
                    await context.SaveChangesAsync();
                    return ayudaSocial.Id;
                }
                else
                {
                    throw new AyudaSocialAssignmentException(ayudaSocialDto.UsuarioId, ayudaSocialDto.TipoAyuda, ayudaSocialDto.Anio);
                }

            }
            catch (AyudaSocialAssignmentException ex)
            {
                throw;
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Error al asignar una ayuda social.");
                throw;
            }
        }

        public async Task<bool> CanAssignAyudaSocial(int usuarioId, string tipoDeAyuda, int año)
        {
            try
            {
                return await context.AyudasSociales
                    .AnyAsync(a =>
                        a.UsuarioId == usuarioId &&
                        a.TipoAyuda == tipoDeAyuda &&
                        a.Anio == año) == false;
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Error al encontrar la ayuda social.");
                throw;
            }
        }

        public async Task<int> CreateAyudaSocialForRegion(AyudaSocialForRegionDTO ayudaSocialDto)
        {
            try
            {
                var region = await context.Regiones
                    .Include(r => r.Comunas)
                    .FirstOrDefaultAsync(r => r.Id == ayudaSocialDto.RegionId);

                if (region == null)
                {
                    throw new InvalidOperationException("No se encontró la región especificada.");
                }

                foreach (var comuna in region.Comunas)
                {
                    if (await CanAssignAyudaSocial(ayudaSocialDto.UsuarioId, ayudaSocialDto.TipoAyuda, ayudaSocialDto.Anio))
                    {
                        var ayudaSocial = new AyudaSocial
                        {
                            TipoAyuda = ayudaSocialDto.TipoAyuda,
                            Anio = ayudaSocialDto.Anio,
                            ComunaId = comuna.Id,
                            UsuarioId = ayudaSocialDto.UsuarioId,
                            FechaAsignacion = ayudaSocialDto.FechaAsignacion
                        };

                        context.AyudasSociales.Add(ayudaSocial);
                    }
                    else
                    {
                        throw new AyudaSocialAssignmentException(ayudaSocialDto.UsuarioId, ayudaSocialDto.TipoAyuda, ayudaSocialDto.Anio);
                    }
                }

                await context.SaveChangesAsync();

                var primeraAyudaSocialAsignada = region.Comunas.FirstOrDefault()?.AyudasSociales.FirstOrDefault();
                return primeraAyudaSocialAsignada?.Id ?? 0;
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Error al asignar una ayuda social.");
                throw;
            }
        }

        public async Task<List<AyudaSocialDTO>> GetAyudasSocialesByUsuario(int usuarioId)
        {
            var ayudasSociales = await context.AyudasSociales
                .Where(a => a.UsuarioId == usuarioId)
                .OrderByDescending(a => a.Anio)
                .ToListAsync();

            return _mapper.Map<List<AyudaSocialDTO>>(ayudasSociales);
        }

        public async Task<(List<AyudaSocialDTO> ayudasSociales, string ultimaAyudaVigente)> GetAyudasSocialesByUsuarioByOrder(int usuarioId)
        {
            try
            {
                var ayudasSociales = await context.AyudasSociales
                .Where(a => a.UsuarioId == usuarioId)
                .OrderByDescending(a => a.FechaAsignacion)
                .ToListAsync();

                var ayudasSocialesDTO = _mapper.Map<List<AyudaSocialDTO>>(ayudasSociales);
                var ultimaAyudaVigenteModel = ayudasSociales.FirstOrDefault(a => a.FechaAsignacion <= DateTime.Now);
                var ultimaAyudaVigente = ultimaAyudaVigenteModel != null ? _mapper.Map<AyudaSocialDTO>(ultimaAyudaVigenteModel) : null;

                return (ayudasSocialesDTO, ultimaAyudaVigente != null ? ultimaAyudaVigente.TipoAyuda : null);

            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Error al obtener la informacion de las ayudas sociales.");
                throw;
            }
            
        }

        public async Task<List<UsuariosConAyudasDTO>> GetUsuariosConAyudas()
        {
            try
            {
                var usuariosConAyudas = await context.Usuarios
                .Include(u => u.AyudasSociales)
                .Where(u => u.AyudasSociales.Any())
                .ToListAsync();

                return _mapper.Map<List<UsuariosConAyudasDTO>>(usuariosConAyudas);

            } catch (Exception ex)
            {
                logger.LogError(ex, "Error al obtener la informacion de las ayudas sociales.");
                throw;
            }
        }
    }
}
